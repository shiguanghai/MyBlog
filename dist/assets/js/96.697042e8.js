(window.webpackJsonp=window.webpackJsonp||[]).push([[96],{586:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"阿里妈妈事业群-电话面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阿里妈妈事业群-电话面"}},[t._v("#")]),t._v(" 阿里妈妈事业群-电话面")]),t._v(" "),a("h3",{attrs:{id:"_1-判断是不是数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-判断是不是数组"}},[t._v("#")]),t._v(" 1.判断是不是数组")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("Array.isArray(a)")])]),t._v(" "),a("p",[a("code",[t._v("a instanceof Array")])]),t._v(" "),a("p",[a("code",[t._v("a.constructor === Array")])]),t._v(" "),a("p",[a("code",[t._v("oBject.prototype.toString.call(a) === '[object Array]'")])])]),t._v(" "),a("h3",{attrs:{id:"_2-你提到instanceof就聊一聊instanceof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-你提到instanceof就聊一聊instanceof"}},[t._v("#")]),t._v(" 2.你提到instanceof就聊一聊instanceof")]),t._v(" "),a("blockquote",[a("p",[t._v("Instanceof 用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上")]),t._v(" "),a("p",[t._v("例如在表达式 "),a("code",[t._v("left instanceof right")]),t._v(" 中 会沿着 left 的原型链查找看是否存在 right 的 prototype 对象")]),t._v(" "),a("p",[a("code",[t._v("left.__proto__.__proto__... =?= right.prototype")])])]),t._v(" "),a("h3",{attrs:{id:"_3-那就说一说原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-那就说一说原型链"}},[t._v("#")]),t._v(" 3.那就说一说原型链")]),t._v(" "),a("blockquote",[a("p",[t._v("每一个构造函数都有一个prototype属性，指向了它的原型")]),t._v(" "),a("p",[t._v("每一个实例有一个__proto__属性，这个属性指向了它的原型，原型上还有__proto__，指向了它父类的原型,一直到Object.prototype为止，所以Object的原型，是一个对象的终极原型，它的prototype是null")]),t._v(" "),a("p",[t._v("访问实例的一个属性，会从它的实例内部查找，若没有就到它的原型，还没有就继续向父一级原型查找，一直找到Object.prototype位置，没有就返回undefined")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://public.shiguanghai.top/blog_img/image-20210413184755606.png",alt:"image-20210413184755606"}})])]),t._v(" "),a("h3",{attrs:{id:"_4-原型链怎么实现继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-原型链怎么实现继承"}},[t._v("#")]),t._v(" 4.原型链怎么实现继承")]),t._v(" "),a("blockquote",[a("p",[t._v("假设构造函数 B() 需要继承构造函数 A()，就可以通过将函数 B() 的显式原型指向一个函数 A() 的实例，然后再对 B 的显式原型进行扩展。那么通过函数 B() 创建的实例，既能访问函数 B() 的属性 b，也能访问函数 A() 的属性 a，从而实现了多层继承。")]),t._v(" "),a("p",[t._v("具体例子：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义动物类")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Animal")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("属性、实例方法"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原型方法")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("eat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原型链继承")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("food")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'cat'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("除此之外，构造继承")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("实例继承")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Cat")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" instance "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Animal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n instance"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name\n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" instance\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"_5-通过原型链判断是不是数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-通过原型链判断是不是数组"}},[t._v("#")]),t._v(" 5.通过原型链判断是不是数组")]),t._v(" "),a("blockquote",[a("p",[a("code",[t._v("a.__proto__.__proto__... =?= Array.prototype")])])]),t._v(" "),a("h3",{attrs:{id:"_6-数组操作元素的方法-主要考察map-foreach-filter-方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-数组操作元素的方法-主要考察map-foreach-filter-方法"}},[t._v("#")]),t._v(" 6.数组操作元素的方法 -> 主要考察map() forEach() filter()...方法")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("不改变原数组的方法")])]),t._v(" "),a("p",[a("strong",[t._v("IndexOf()/lastIndexOf()")]),t._v("：返回元素在数组第一次/最后一次出现的索引，从0开始。若不存在返回-1")]),t._v(" "),a("p",[a("strong",[t._v("slice(start, end)")]),t._v("：索引从start开始截取到索引end结束，没有参数复制整个数组")]),t._v(" "),a("p",[a("strong",[t._v("concat()")]),t._v("：合并数组，如果参数是数组会被拉平一次再加入到新数组")]),t._v(" "),a("p",[a("strong",[t._v("join()")]),t._v("：把当前Array的每个元素都用指定字符串连接起来，没有参数默认用','连接")]),t._v(" "),a("p",[a("strong",[t._v("toString()")]),t._v("：返回数组的字符串形式")]),t._v(" "),a("p",[a("strong",[t._v("valueOf()")]),t._v("：返回数组本身")]),t._v(" "),a("p",[a("strong",[t._v("map(function(elem, index, arr))")]),t._v("：对数组的所有成员依次调用一个函数，返回值是一个新的数组。三个参数依次是当前成员、当前位置、数组本身")]),t._v(" "),a("p",[a("strong",[t._v("forEach()")]),t._v("：与map方法相似，也是遍历数组的所有成员，执行某种操作，一般没有返回值")]),t._v(" "),a("p",[a("strong",[t._v("filter()")]),t._v("：删选，返回过滤后的新数组")]),t._v(" "),a("p",[a("strong",[t._v("some()")]),t._v("：只要有一个数组成员的返回值为true，则整个some方法的返回值就是true，否则为false。空数组返回false")]),t._v(" "),a("p",[a("strong",[t._v("every()")]),t._v("：所有数组成员的返回值都是true才返回true，否则为false。空数组返回true")]),t._v(" "),a("p",[a("strong",[t._v("reduce()/reduceRight()")]),t._v("：依次处理数组的每个成员，最终累计为一个值")]),t._v(" "),a("ul",[a("li",[t._v("改变原数组的方法")])]),t._v(" "),a("p",[a("strong",[t._v("push()")]),t._v("：向数组的末尾添加若干元素，返回值是改变后的数组长度")]),t._v(" "),a("p",[a("strong",[t._v("pop()")]),t._v("：删除数组最后一个元素，返回值是删除的元素")]),t._v(" "),a("p",[a("strong",[t._v("unshift()")]),t._v("：向数组头部添加若干元素，返回值是改变后的数组长度")]),t._v(" "),a("p",[a("strong",[t._v("shift()")]),t._v("：删除数组第一个元素，返回值是删除的元素")]),t._v(" "),a("p",[a("strong",[t._v("sort()")]),t._v("：数组排序，默认将所有元素转换成字符串，再按字符串Unicode码点排序，返回值是新数组；如果元素都是数字，按从小到大排序，可以出传入一个回调函数作为参数")]),t._v(" "),a("p",[a("strong",[t._v("reverse()")]),t._v("：颠倒数组中元素的位置")]),t._v(" "),a("p",[a("strong",[t._v("splice(start, deleteCount, item)")]),t._v("：stary 未开始的索引，deletecount 表示要移除的数组元素的个数，item 为要添加进数组的元素")])]),t._v(" "),a("h3",{attrs:{id:"_7-展开数组的方法-数组扁平化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7-展开数组的方法-数组扁平化"}},[t._v("#")]),t._v(" 7.展开数组的方法（数组扁平化）")]),t._v(" "),a("blockquote",[a("p",[t._v("最简单循环加递归：循环中判断，如果子元素是数组则递归，不是则push到新数组")]),t._v(" "),a("p",[a("code",[t._v("arr.toString().split(',')")])]),t._v(" "),a("p",[a("code",[t._v("arr.join(',').split(',')")])]),t._v(" "),a("p",[t._v("利用reduce+concat循环递归：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" item")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("concat")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("item是数组循环 不是返回"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[a("code",[t._v("some")]),t._v("+扩展运算符"),a("code",[t._v("...arr")])]),t._v(" "),a("p",[a("code",[t._v("some")]),t._v("+"),a("code",[t._v("Array.from(arr)")])]),t._v(" "),a("p",[a("code",[t._v("some")]),t._v("+"),a("code",[t._v("[].slice.call(arr)")])])]),t._v(" "),a("h3",{attrs:{id:"_8-jquery-是函数吗、操作数组对象、常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_8-jquery-是函数吗、操作数组对象、常用方法"}},[t._v("#")]),t._v(" 8.jQuery 是函数吗、操作数组对象、常用方法")]),t._v(" "),a("blockquote",[a("p",[t._v("jQuery源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染。然后通过传入window对象参数，可以使window对象作为局部变量使用，同样的传入undefined参数，可以缩短查找undefined时的作用域链")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("undefined")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("jQuery "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" jQuery\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(" window "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("一些简单的CRUD操作")]),t._v(" "),a("p",[t._v("append()：父元素将子元素添加到末尾")]),t._v(" "),a("p",[t._v("prepend()：父元素父元素将子元素添加到开头")]),t._v(" "),a("p",[t._v("after()：添加元素到元素后面")]),t._v(" "),a("p",[t._v("before()：添加元素到元素前面")]),t._v(" "),a("p",[t._v("remove()：移除元素")])]),t._v(" "),a("h3",{attrs:{id:"_9-this-指向问题-举几个例子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_9-this-指向问题-举几个例子"}},[t._v("#")]),t._v(" 9.this 指向问题 举几个例子")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("代码 1 执行fn()函数时，实际上就是通过对象 o 来调用的，所以 this 指向对象 o")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ul",[a("li",[t._v("代码 2 也是同样的道理，通过实例 a 来调用，this 指向类实例 a。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 2")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("但是要注意的是，ES6 下的 class 内部默认采用的是严格模式，这类问题如果改变一下最后：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a.fn()")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" fun "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fn\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ?")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("而严格模式下不会指定全局对象为默认调用对象，所以答案是 undefined。")]),t._v(" "),a("ul",[a("li",[t._v("代码 3 则可以看成是通过全局对象来调用，this 会指向全局对象（严格模式下指向 undefined）")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器：Window；Node.js：global")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ul",[a("li",[t._v("代码 4 forEach() 有两个参数，第一个参数是回调函数，第二个是 this 指向的对象，这里只传入了回调函数，第二个参数没有传入，默认为 undefined，所以 this 指向全局对象")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 4")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" dx "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  arr"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\ndx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("forEach")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器：Window；Node.js：global")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ul",[a("li",[t._v("代码 5 ES6 新加入的箭头函数不会创建自己的 this，它只会从自己的作用域链的上一层继承 this。可以简单地理解为"),a("strong",[t._v("箭头函数的 this 继承自上层的 this")]),t._v("，但在全局环境下定义仍会指向全局对象。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码 5")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" arrow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\narrow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("fn")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 浏览器：Window；Node.js：global")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("ul",[a("li",[t._v("代码 6 改变 this 指向的常见 3 种方式有 bind、call 和 apply。call 和 apply 用法功能基本类似，都是通过传入 this 指向的对象以及参数来调用函数。区别在于传参方式，前者为逐个参数传递，后者将参数放入一个数组，以数组的形式传递。bind 有些特殊，它不但可以绑定 this 指向也可以绑定函数参数并返回一个新的函数，当调用新的函数时，绑定之后的 this 或参数将无法再被改变。")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("bind")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'bind'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'call'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getName")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'apply'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("由于 this 指向的不确定性，所以很容易在调用时发生意想不到的情况。在编写代码时，应尽量避免使用 this，比如可以写成纯函数的形式，也可以通过参数来传递上下文对象。实在要使用 this 的话，可以考虑使用 bind 等方式将其绑定。")])]),t._v(" "),a("h3",{attrs:{id:"_10-箭头函数实现原理-为什么没有this指向"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_10-箭头函数实现原理-为什么没有this指向"}},[t._v("#")]),t._v(" 10.箭头函数实现原理 为什么没有this指向")]),t._v(" "),a("blockquote",[a("p",[t._v("箭头函数中没有 this 的机制，不会改变 this 的指向；它的 this 是继承而来的，默认指向宿主对象，而不是执行时的对象。")]),t._v(" "),a("p",[t._v("箭头函数和普通函数相比：")]),t._v(" "),a("ul",[a("li",[t._v("不绑定 arguments 对象，也就是说在箭头函数内访问 arguments 对象会报错")]),t._v(" "),a("li",[t._v("不能用作构造器，也就是说不能通过关键字 new 来创建实例")]),t._v(" "),a("li",[t._v("默认不会创建 prototype 原型属性")]),t._v(" "),a("li",[t._v("不能用作 Generator() 函数，不能使用 yeild 关键字")])])]),t._v(" "),a("h3",{attrs:{id:"_11-提到-arguments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_11-提到-arguments"}},[t._v("#")]),t._v(" 11.提到 arguments")]),t._v(" "),a("blockquote",[a("p",[t._v("arguments 是具有数组某些特性的「类数组」（伪数组）")]),t._v(" "),a("p",[t._v("每个函数都有一个 Arguments 对象实例 arguments，它引用着函数的实参，可以用数组下标的方式'[]'引用arguments的元素")]),t._v(" "),a("p",[t._v("使用场景：有时候使用闭包来实现一次性函数，但是并不确定传参个数，可以在内部使用"),a("code",[t._v("apply(this, arguments)")]),t._v("的方式来取实参")])]),t._v(" "),a("h3",{attrs:{id:"_12-getter-setter-提到了-proxy"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_12-getter-setter-提到了-proxy"}},[t._v("#")]),t._v(" 12.getter setter 提到了 Proxy")]),t._v(" "),a("blockquote",[a("p",[t._v("getter 函数：获取 object 对象的属性值")]),t._v(" "),a("p",[t._v("setter 函数：对 object 对象的属性进行赋值")]),t._v(" "),a("p",[t._v("通常有两种手段可以对 object 对象存、取值：1. 在对象初始化时、2. 在对象初始化后")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象初始化时")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nkey"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getkey")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setkey")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对象初始化后")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__defineGetter__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\no"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("__defineSetter__")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br")])]),a("p",[t._v("这里提到了 ES6 的 Proxy对象，用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" person "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\nname"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sgh'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\nage"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 构建一个代理对象 第一个参数：需要代理的目标对象")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" personProxy "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("person"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监视属性读取")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" property"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代理的目标对象 外部访问的属性名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 监视属性设置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" property"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代理的目标对象 外部访问的属性名 写入的属性名")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br")])]),a("p",[t._v("get方法内部的正常逻辑：先判断代理目标对象是否存在这样一个属性，如果存在就返回一个对应的值，反之如果不存在则返回undefined或者是一个默认值。")]),t._v(" "),a("p",[t._v("set方法内部的正常逻辑：为代理目标设置指定的属性，这里我们可以先做一些数据校验，如果设置的是age，值就必须为数字，否则报错。完成以后尝试给代理对象age设置为一个字符串，此时就会报错，如果设置的是一个正常的数字，结果就可以设置到目标对象上。")])]),t._v(" "),a("h3",{attrs:{id:"_13-proxy-和-defineproperty-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_13-proxy-和-defineproperty-的区别"}},[t._v("#")]),t._v(" 13. proxy 和 defineProperty 的区别")]),t._v(" "),a("blockquote",[a("ol",[a("li",[a("p",[t._v("Proxy 更为强大。Object.defineProperty() 只能监视属性的读写，Proxy 能监视到更多对象操作，如 deleteProperty、has等等。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://public.shiguanghai.top/blog_img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTQ5MjU2,size_16,color_FFFFFF,t_70.png",alt:"在这里插入图片描述"}})])]),t._v(" "),a("li",[a("p",[t._v("Proxy 更好的支持数组对象的监视。以往想通过 Object.defineProperty() 去监视数组操作，最常见的一种方式时通过重写数组的操作方法（Vue.js 2.x 使用的方法）大体的思路就是通过自定义的方法去覆盖掉数组原先对象的push、shift等方法以此去劫持对应这个方法调用的过程。但 Proxy 内部会自动根据 push 等操作去推算出它应该所处的下标。")])]),t._v(" "),a("li",[a("p",[t._v("Proxy 是以非侵入的方式监管了对象的读写。也就是说已经定义好的对象，不需要对对象本身做任何操作就可以监视到内部成员的读写，而 Object.defineproperty() 就要求我们必须通过特定方式单独定义对象中需要被监视的属性。")])])])]),t._v(" "),a("h3",{attrs:{id:"_14-提到es6-var-let-const-区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_14-提到es6-var-let-const-区别"}},[t._v("#")]),t._v(" 14.提到ES6，var let const 区别")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("var 定义的变量，没有块的概念，可以跨块访问，不能跨函数访问")]),t._v(" "),a("li",[t._v("let 定义的变量，只能在块作用域里访问，不能跨块访问，也不能跨函数访问")]),t._v(" "),a("li",[t._v("const 定义的常量，使用时必须初始化（赋值），只能在块作用域里访问，而且不能修改")])]),t._v(" "),a("p",[t._v("三者的区别")]),t._v(" "),a("ol",[a("li",[t._v("let 与 const 是块作用域，在整个大括号"),a("code",[t._v("{}")]),t._v("内可见")]),t._v(" "),a("li",[t._v("let 与 const 在变量声明之前就访问变量的话，会直接提示 ReferenceError，而不像 var 使用默认值 undefined")]),t._v(" "),a("li",[t._v("let 与 const 存在暂时性死区，只要块级作用域有 let 或者 const 命令，它所声明的变量就 绑定 这个区域，不再受外部的影响，在 let const 变量被赋值前不可读写")]),t._v(" "),a("li",[t._v("let 与 const 不允许重复声明")]),t._v(" "),a("li",[t._v("const 定义的变量的引用不能够被更改")])])]),t._v(" "),a("h3",{attrs:{id:"_15-const-操作对象-怎么添加对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_15-const-操作对象-怎么添加对象"}},[t._v("#")]),t._v(" 15.const 操作对象 怎么添加对象")]),t._v(" "),a("blockquote",[a("p",[t._v("Const 声明的成员不可修改，只是说我们不允许在声明过后重新去指向一个新的内存地址，并不是不允许修改恒量中的属性成员")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 恒量只是要求内层指向不允许被修改")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 对于数据成员的修改是没有问题的")]),t._v("\nobj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'sgh'")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("这个时候并没有去修改 obj 指向的内存地址，只是修改了这块内存空间的数据，相反如果我们是将 obj 等于一个新的空对象，就会报错")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"_16-babel-编译平台-了解吗-你用的什么-presets"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_16-babel-编译平台-了解吗-你用的什么-presets"}},[t._v("#")]),t._v(" 16.Babel 编译平台 了解吗  你用的什么-> presets")]),t._v(" "),a("blockquote",[a("p",[t._v("加载器可以用来编译转换代码")]),t._v(" "),a("p",[t._v("对于早期的 Node.js 版本，可以使用 Babel 实现 ES Modules 的兼容")]),t._v(" "),a("div",{staticClass:"language-shell line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" @babel/node @babel/core @babel/preset-env --dev\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Babel 只是转换 JS代码 的平台，实际帮我们转换 ES Modules 特性的是一个插件，并不是 preset，它只是一个集合，我们可以使用单独插件来转换，如`@babel/plugin-transform-modules-commonjs")])]),t._v(" "),a("h3",{attrs:{id:"_17-js-编译-提到了webpack"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_17-js-编译-提到了webpack"}},[t._v("#")]),t._v(" 17.js 编译  ->提到了webpack")]),t._v(" "),a("blockquote",[a("p",[t._v("Webpack 作为一个模块打包器，它本身就可以解决模块化 JavaScript 代码打包的问题。其次 Webpack 还具备代码拆分的能力，它能够将应用当中所有的代码都按照我们的需要去打包。最后对于前端资源模块的问题，Webpack 支持在 JavaScript 当中以模块化的方式载入任意类型的资源文件。")]),t._v(" "),a("p",[t._v("由于 Webpack 默认就能处理代码当中的 import 和 export，所以很自认的会有人认为 Webpack 会自动编译 ES6 的代码")]),t._v(" "),a("p",[t._v("实则不然，Webpack 仅仅是对模块完成打包工作，所以它才会对代码中的 import 和 export 做一些相应的转换，除此之外并不会去转换代码当中其他的 ES6 特性")]),t._v(" "),a("p",[t._v("如果需要 Webpack 在打包过程中同时处理其他 ES6 特性的转换，我们需要为 JS文件配置一个额外的编译型Loader: "),a("code",[t._v("babel-loader")])])]),t._v(" "),a("h3",{attrs:{id:"_18-既然提到-loader-就聊聊-loader-的实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_18-既然提到-loader-就聊聊-loader-的实现原理"}},[t._v("#")]),t._v(" 18.既然提到 loader，就聊聊 loader 的实现原理")]),t._v(" "),a("blockquote",[a("p",[t._v("Loader 直译为加载器，webapck 将一切文件视为模块，但是 webpack 原生是只能解析 JS 文件，如果想将其他文件打包的话，就会用到 loader。所以 loader 的作用就是让 webpack 拥有了加载和解析 非JavaScript 文件的能力（编译转换代码、文件操作、代码检查）")]),t._v(" "),a("p",[t._v("Loader 在 "),a("code",[t._v("module.rules")]),t._v(" 中配置，也就是说它作为模块的解析规则而存在。类型为数组，每一项都是一个 Object，里面描述了对于什么类型的文件（test）使用什么加载（loader）和使用的参数（options）")]),t._v(" "),a("ul",[a("li",[t._v("开发 Loader 的思路：")])]),t._v(" "),a("p",[t._v("Webpack 加载资源的过程有点类似一个工作管道，可以在这个过程当中一次使用多个 loader，但是要求我们最终这个管道工作过后的结果必须是一段 JavaScript 代码，要么 loader 直接返回一段 JS 代码，要么去找一个合适的加载器接着去处理我们这里返回的结果。")]),t._v(" "),a("ol",[a("li",[t._v("可以直接在项目根目录新建"),a("code",[t._v("test-loader.js")]),t._v("（完成后也可以发布到 npm 作为独立模块使用）")]),t._v(" "),a("li",[t._v("这个文件需要导出一个函数，这个函数就是我们的 loader 所加载到的资源的处理过程")]),t._v(" "),a("li",[t._v("函数输入为 加载到的资源，输出为 加工后的结果")]),t._v(" "),a("li",[t._v("输出结果可以有两种形式：第一，输出标准的 JS 代码，让打包结果的代码能正常执行；第二，输出处理结果，交给下一个 loader 进一步处理成 JS 代码")]),t._v(" "),a("li",[t._v("在 "),a("code",[t._v("webpack.config.js")]),t._v(" 中使用 loader，配置 "),a("code",[t._v("module.rules")]),t._v("，其中 user 除了可以使用模块名称，也可以使用模块路径")])])]),t._v(" "),a("h3",{attrs:{id:"_19-webpack-打包流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_19-webpack-打包流程"}},[t._v("#")]),t._v(" 19.webpack 打包流程")]),t._v(" "),a("blockquote",[a("p",[t._v("webpack 的打包思想可以简化为3点：")]),t._v(" "),a("ol",[a("li",[t._v("一切源代码文件均可以通过各种 Loader 转换为 JS 模块（module），模块之间可以互相引用")]),t._v(" "),a("li",[t._v("webpack 通过入口点（entry option）递归处理各模块引用关系，最后输出为一个或多个产物包 js（bundle）文件")]),t._v(" "),a("li",[t._v("每一个入口点都是一个块组（chunk group），在不考虑分包的情况下，一个 chunk group 中只有一个 chunk，该 chunk 包含递归分析后的所有模块，每一个 chunk 都有对应的一个打包后的输出文件（asset/bundle）")])])]),t._v(" "),a("h3",{attrs:{id:"_20-webpack-构建-开发性能优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20-webpack-构建-开发性能优化"}},[t._v("#")]),t._v(" 20.webpack 构建 开发性能优化")]),t._v(" "),a("blockquote",[a("p",[t._v("不同环境不同配置：Webpack4 推出 模式mode 的用法，提供了不同模式下的预设。小型项目配置文件根据环境不同导出不同配置；大型项目不同环境对应不同配置文件")]),t._v(" "),a("ul",[a("li",[t._v("开发环境注重开发效率")])]),t._v(" "),a("ol",[a("li",[t._v("自动编译：使用 Webpack-cli 中的 watch 模式"),a("code",[t._v("-- watch")]),t._v("，一旦文件发生变化就会重新运行打包")]),t._v(" "),a("li",[t._v("自动刷新浏览器：使用 BrowserSync 实现编译过后自动刷新浏览器")]),t._v(" "),a("li",[t._v("Webpack Dev Server：集成 自动编译 和 自动刷新浏览器，打包结果暂存在内存当中")]),t._v(" "),a("li",[t._v("Source Map：调试时将产物代码显示回源代码")]),t._v(" "),a("li",[t._v("热更新HMR：webpack-dev-server 集成了 HMR，使用"),a("code",[t._v("--hot")]),t._v("开启，解决自动刷新导致的页面状态丢失")])]),t._v(" "),a("ul",[a("li",[t._v("生产环境注重运行效率")])]),t._v(" "),a("ol",[a("li",[t._v("DefinePlugin：为代码注入全局成员，可以以此判断运行环境，如"),a("code",[t._v("process.env.NODE_ENV")])]),t._v(" "),a("li",[t._v("Tree Shaking：可以自动检测出代码中未引用的代码并移除掉，生产模式自动开启")]),t._v(" "),a("li",[t._v("sideEffects：允许通过配置的方式去标识代码中是否有副作用（模块执行时除了导出成员之外所做的事情）从而为 Tree Shaking 提供更大的压缩空间")]),t._v(" "),a("li",[t._v("CodeSplitting：代码分割，防止 bundle 体积过大浪费流量和带宽，它通过将模板按照我们所设计的规则打包到不同的 bundle 中从而提高应用的响应速度。分包主要有两种 多入口打包和动态导入，"),a("a",{attrs:{href:"https://shiguanghai.top/blogs/%E5%A4%A7%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E5%AE%9E%E6%88%98/Webpack%20%E6%89%93%E5%8C%85.html#webpack-%E4%BB%A3%E7%A0%81%E5%88%86%E5%89%B2-codesplitting",target:"_blank",rel:"noopener noreferrer"}},[t._v("详见"),a("OutboundLink")],1)])])]),t._v(" "),a("h3",{attrs:{id:"_21-vue-中-computed-watch-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_21-vue-中-computed-watch-的区别"}},[t._v("#")]),t._v(" 21.vue 中 computed watch 的区别")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("同\n"),a("ul",[a("li",[t._v("computed 和 watch 都是观察页面的数据变化的")])])]),t._v(" "),a("li",[t._v("异\n"),a("ul",[a("li",[t._v("computed 只有当页面数据变化时才会计算，当数据没有变化时，它会读取缓存。而 watch 每次都需要执行函数，methods 也是每次都需要执行")]),t._v(" "),a("li",[t._v("数据变化时执行异步操作或开销较大的操作，这个时候使用 watch 是合适的")])])])])]),t._v(" "),a("h3",{attrs:{id:"_22-vuex-基本结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_22-vuex-基本结构"}},[t._v("#")]),t._v(" 22.vuex 基本结构")]),t._v(" "),a("blockquote",[a("ul",[a("li",[t._v("Vuex 是专门为 Vue.js 设计的状态管理库")]),t._v(" "),a("li",[t._v("Vuex 采用集中式的方式存储需要共享的数据")]),t._v(" "),a("li",[t._v("从使用角度，Vuex 就是一个 JavaScript 库")]),t._v(" "),a("li",[t._v("Vuex 的作用是进行状态管理，解决复杂组件通信，数据共享")]),t._v(" "),a("li",[t._v("Vuex 集成到了 devtools 中，提供了 time-travel 时光旅行历史回滚功能")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://public.shiguanghai.top/blog_img/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQ1MTQ5MjU2,size_16,color_FFFFFF,t_70-20210415133426495.png",alt:"在这里插入图片描述"}})]),t._v(" "),a("ul",[a("li",[t._v("Store：仓库，是使用Vuex应用程序的核心，每一个应用仅有一个Store。Store是一个容器，包含应用中的大部分状态，不能直接改变 Store 中的状态，要通过提交 Mutation 的方式")]),t._v(" "),a("li",[t._v("State：状态保存至 Store 中，因为 Store 是唯一的，因此状态也是唯一的，称为单一状态树。但是如果所有的状态都保存在 State 中，程序则难以维护，可以通过后续的模块来解决该问题。注意这里的状态是响应式的")]),t._v(" "),a("li",[t._v("Getter：像是 Vuex 中的计算属性，方便从一个属性派生出其他的值。它内部可以对计算的结果进行缓存，只有当以来的状态发生改变时才会重新计算")]),t._v(" "),a("li",[t._v("Mutation：状态的变化必须通过提交 Mutation 来完成")]),t._v(" "),a("li",[t._v("Action：和 Mutation类似，不同的是 Action 可以进行异步操作，内部状态改变的时候都需要提交 Mutation")]),t._v(" "),a("li",[t._v("Module：模块，由于使用单一状态树，应用的所有状态会集中到一个比较大的对象上来，当应用变得非常复杂时，Store 对象就有可能变得非常臃肿。为了解决这个问题，Vuex 允许我们将 Store 分割成模块，每个模块都拥有自己的 State、Mutation、Action、Getter甚至是嵌套子模块")])])]),t._v(" "),a("h3",{attrs:{id:"_23-vuex-mutation-和-action-区别-为什么不都归到-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_23-vuex-mutation-和-action-区别-为什么不都归到-action"}},[t._v("#")]),t._v(" 23.vuex mutation 和 action 区别，为什么不都归到 action")]),t._v(" "),a("blockquote",[a("p",[t._v("State 状态的变更只能通过 commit mutation 来完成，这仅仅是一个约定，尝试确实可以在 action 里直接更改 state 的状态。")]),t._v(" "),a("p",[t._v("但是你试想：你可以在组件中随时获取到 "),a("code",[t._v("$store.state")]),t._v(" 状态对它进行修改，从语法层面没问题，但是这破坏了 Vuex 的约定，devtools 无法跟踪到这次状态的修改，如此写代码更高效易维护且逻辑更清晰。")]),t._v(" "),a("p",[t._v("当我们开启严格模式"),a("code",[t._v("strict: true")]),t._v("，如果你在组件中直接修改 state 状态，会抛出错误：不要在 Mutation 之外修改 Vuex 中的状态。虽然此处抛出异常，但是 state 中的数据也被修改了。")]),t._v(" "),a("p",[t._v("最后，不要在生产环境下开启严格模式，严格模式会深度检查状态树，来检查不合规的状态改变，会影响性能。")])]),t._v(" "),a("h3",{attrs:{id:"_24-vuex-action-应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_24-vuex-action-应用"}},[t._v("#")]),t._v(" 24.vuex action 应用")]),t._v(" "),a("blockquote",[a("p",[t._v("使用 Vuex 做 "),a("a",{attrs:{href:"https://shiguanghai.top/blogs/%E5%A4%A7%E5%89%8D%E7%AB%AF/Vue.js%20%E6%A1%86%E6%9E%B6%E6%BA%90%E7%A0%81%E4%B8%8E%E8%BF%9B%E9%98%B6/Vuex%20%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86-%E8%B4%AD%E7%89%A9%E8%BD%A6%E6%A1%88%E4%BE%8B.html#%E5%95%86%E5%93%81%E5%88%97%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"}},[t._v("购物车组件"),a("OutboundLink")],1),t._v(" 的时候，需要做商品展示列表模块，在请求接口获取数据的时候使用到 Action")])]),t._v(" "),a("h3",{attrs:{id:"_25-开发一个组件-过程中有哪些需要注意的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_25-开发一个组件-过程中有哪些需要注意的"}},[t._v("#")]),t._v(" 25.开发一个组件 过程中有哪些需要注意的")]),t._v(" "),a("blockquote",[a("p",[t._v("CDD（Component-Driven Development）")]),t._v(" "),a("p",[t._v("自上而下；从组件级别开始，到页面级别结束，先从相对完整的设计中抽象出来组件，先隔离开发组件在开发页面")]),t._v(" "),a("p",[t._v("使组件最大限度被重用，并行开发，可视化测试")]),t._v(" "),a("p",[t._v("可以使用 ElementUI，在其基础上进行开发，如果是对组件样式有要求则可以有一套自己的使用标准，开发自己的组建库。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);