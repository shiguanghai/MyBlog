(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{577:function(e,t,a){"use strict";a.r(t);var r=a(1),l=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#webpack的构建流程是什么-从读取配置到输出文件这个过程尽量说全"}},[e._v("#")]),e._v(" webpack的构建流程是什么？从读取配置到输出文件这个过程尽量说全")]),e._v(" "),a("h3",{attrs:{id:"解题思路"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#解题思路"}},[e._v("#")]),e._v(" 解题思路")]),e._v(" "),a("p",[e._v("Webpack 的运行流程是一个串行的过程，从启动到结束会依次执行以下流程：")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("初始化参数：从配置文件和 Shell 语句中读取与合并参数，得出最终的参数；")])]),e._v(" "),a("li",[a("p",[e._v("开始编译：用上一步得到的参数初始化 Compiler 对象，加载所有配置的插件，执行对象的 run 方法开始执行编译；")])]),e._v(" "),a("li",[a("p",[e._v("确定入口：根据配置中的 entry 找出所有的入口文件；")])]),e._v(" "),a("li",[a("p",[e._v("编译模块：从入口文件出发，调用所有配置的 Loader 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理；")])]),e._v(" "),a("li",[a("p",[e._v("完成模块编译：在经过第4步使用 Loader 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系；")])]),e._v(" "),a("li",[a("p",[e._v("输出资源：根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 Chunk，再把每个 Chunk 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会；")])]),e._v(" "),a("li",[a("p",[e._v("输出完成：在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件系统。")])])]),e._v(" "),a("p",[e._v("在以上过程中，Webpack 会在特定的时间点广播出特定的事件，插件在监听到感兴趣的事件后会执行特定的逻辑，并且插件可以调用 Webpack 提供的 API 改变 Webpack 的运行结果。")])])}),[],!1,null,null,null);t.default=l.exports}}]);